import { ref, watch } from 'vue';
import Cookies from 'js-cookie';
import { isUndefined, isNull } from 'vue-composable';

function useCookie(key, defaultValue, defaultOptions) {
    let cookie = ref(null);
    let _options;
    let value = Cookies.get(key);
    if (isUndefined(value)) {
        cookie.value = defaultValue;
        if (!isUndefined(defaultValue) && !isNull(defaultValue)) {
            Cookies.set(key, defaultValue, defaultOptions);
            _options = defaultOptions;
        }
    }
    else {
        cookie.value = value;
    }
    const setCookie = (newValue, options) => {
        cookie.value = newValue;
        _options = options;
        Cookies.set(key, cookie.value, _options);
    };
    const removeCookie = () => {
        cookie.value = undefined;
        Cookies.remove(key, _options);
    };
    watch(cookie, (cookie, prevCookie) => {
        if (isUndefined(cookie) || isNull(cookie)) {
            Cookies.remove(key, _options);
        }
        else if (cookie !== prevCookie) {
            Cookies.set(key, cookie, _options);
        }
    }, {
        deep: true,
    });
    return {
        cookie,
        setCookie,
        removeCookie,
    };
}

export { useCookie };
